{
  
    
        "post0": {
            "title": "Terms",
            "content": "Diction is effective it is specific, appropriate, and leads to imagery ( don’t use popularly used phrases, use own words to describe ex testing the water) . | Formal to informal: learned, popular, colloquial, slang . | Don’t have jargon ( wordy and abstract- high diction, passive voice) . | paragraphs (unity- one idea, complete-just right amount of info, order, coherence) . | TS last or first . | Order in paragraphs: specific to general, general to specific, whole to part, ? to answer, effect to cause . | Coherence through repetition, contrast, transitions ( for, in addition, etc), connect between paragraphs . | Intro - statement, info/stats, quotes, dramatic, story . | Ending- restate/emphasize, predict, resolve, quote . | Sentence combination . Sentence modification- context/purpose, important details, . | Sentence coordination- use same idea . | Subordination - combine sentences as a phrase/clause . | . | . Terms Definitions Examples Typical rhetorical effect . High/formal Diction . . | Use of big words and complicated sentences ( no slang or colloquialism) . | . | Academic speeches | Can make the author seem educated and professional → more reliable for the audience | . Middle/moderate Diction . . | Neutral . | . | Newspapers and essays | Can reach a bigger audience as it is not necessarily formal or informal | . . Low/informal Diction . Colloquial Diction . | . . | Everyday words, inclusive to all people not just to the educated . | . | won’t , I’m (contractions) . | Awfully vs very . | Kind of vs a bit . | . Magazine,texts, social media . | Makes the audience feel included ( more inclusive) and is more direct→ helps the audience relate and is more persuasive in terms of arguments | . Abstract Diction . . | Things that many people/ objects share . | Basically intangible ideas . | Are inferred vs seen ( concrete) . | . | Beauty, awful, truth . | . | Can help describe intangible ideas and help elevate a text beyond just what you experience | . Concrete Diction . . | Things that you can sense ( sight, touch, taste, smell, sounds) | Cold, pink, smooth, greasy, crackled . | . | Invokes an image in the audience’s mind ( imagery) and helps them get more immersed in the scene | . Monosyllabic Diction . . | Having one syllable ( short words) . | . | A, it, I, as,cow, bird | Especially in poems, it can lead to adding a stressed and unstressed sentences . It can also add emphasis . | . Polysyllabic Diction . . | Having more than one syllable ( typically even more than three syllables) . | . | Throughout, internationalism, academic | It can lead to the author looking more professional and educated → reliable to audience | . Connotation . . | Denotation: actual meaning of words . Connotation: the feeling that these words evoke ( implicit meaning) . | Slashing vs pruning . Cabin in the woods vs cottage in the forest . | choosing words that have the connotation you want can add to the tone of the piece and show the attitude of the author | . Simple Syntax . . | Most bare bones sentence, subject and predicate (subject and verb and then object that the verb does→ then add adjectives) | Students who are highly intelligent feel that this course is extremely easy . Kids, unaware of the dangers, may decide to do reckless stunts . I am a doctor . | Simple sentences can be used to add variety and can be used to give emphasis without adding too much info | . Compound Syntax . . | Independent clause, conjunction, independent clause | I want to play, so I did my homework first . I am very smart, but not very good at finishing tasks on time . | Can be used to add complexity in a paragraph | . Complex Syntax . . | Independent claud, conjunction, dependent clause, conjunction, dependent clause | I was late again, so I lost my scholarship . Whenever I trip, my legs get all torn up . | Can be used to add complexity in a paragraph | . Compound-complex . | Two independent clauses together with one ( or two, three..) dependent clause | When I was young, I played basketball, and my dad was extremely proud . I want to go to sleep, but first, I need to do homework . | Can be used to add complexity in a paragraph | . Declarative Syntax . . | A sentence that is a statement | I am a doctor . I play basketball . | Can be used to add emphasis in a paragraph | . Parallel construction . | When there is a repetition of phrases with them having the same grammar function and form | He was without a family, without friends, and without hope . Withough…. (form) . | Finish the answer for was ( grammar) . | . Form → laugh, smile, jump . Vs different forms: laughing, smile, jump . | It gives emphasis and leads to more coherence in the thought process as it makes the ideas fell all together | . What kind of adjectives describe tone? . . What creates tone? . | Tone- the author’s attitude shown through the way they write ( word choice, figurative language,etc) | Cold,dreary, wet, musky, moldy→ depressing tone | It can help show the author’s purpose and sway the audience | . Rhetorical Situation: Exigence, Audience,Speaker, Occasion, Purpose and Message . | Exigence- inspiration towards the piece . Audience- who the piece is for . Speaker- Who is the author . Occasion- where is this set . Purpose- the point of piece . Message- what does the piece want to show . | N/A | N/A | . Claim . . | Typically in the topic sentence or near the end | N/A | N/A | . Evidence: . what is the purpose of evidence? . | What can serve as evidence? . | . . | Evidence helps convince the reader of your point and things like statistics and anecdotes can count | N/A | N/A | . Allusion (Rhetorical and literary strategies) . . | To make a reference to popular fiction | Achilles’ heel | Helps the audience understand the idea better through connections | . Rhetorical questions (Rhetorical and literary strategies) . . . | Questions that are asked that already have an answer to them | Why is this? | Help make the audience an active participant | . Pronoun usage (Rhetorical and literary strategies) . . | Using of pronouns in order to emphasize a point in your writing | Us, we, our - inclusive . Repetition of they→ show that they are all similar . | It can be used to reinforce connections the author wants to make (ex can be used to make the audience feel more together) | . Selection of detail (Rhetorical and literary strategies) . . | Choose detail that aids a paragraph to be more precise but not too much to be clunky | N/A | N/A | . Juxtaposition (Rhetorical and literary strategies) . | Contradictory ideas in the same paragraph | Tom was big in ideas but small in stature | This increases the coherency of the paragraph | . Use of absolutes (all, none, etc) (Rhetorical and literary strategies) . | Using absolute language | All, none | Adds emphasis to the idea of the piece | . Point of view (Rhetorical and literary strategies) . | The perspective of the piece | First, second, third person | It can add | . Logos | Use of facts that appeal to logic | 22% of dogs die of __ | Hard to argue against facts | . Ethos | Use of things that appeal to credibility | Being a doctor in a medical speech shows ethos | Shows that the author is reliable | . Pathos | Use of things that appeal to emotion | Ex Anecdotes | Makes the audience feel for the author and sways to their side | . What creates these appeals? ( logos, ethos, pathos) | Facts, statistics, pictures,anecdotes | N/A | N/A | .",
            "url": "https://lychee80.github.io/Test/2022/12/01/terms.html",
            "relUrl": "/2022/12/01/terms.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Hello World post",
            "content": "msg=&quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://lychee80.github.io/Test/2022/12/01/pythonHelloworld.html",
            "relUrl": "/2022/12/01/pythonHelloworld.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitives",
            "content": "Every program needs at least one class whose name matches the file name (ex myFirstProgram.java) | There are eight primitive types (byte, short, boolean, int, double, char, float, long) | public class HelloStatic { public static void main(String[] args){ int x = 10; //an integer value double y= 10.8; //a double aka a decimal value System.out.println(&quot;Hello I am &quot; + x + &quot; years old&quot;); System.out.println(y*x);//makes 10 multiplied by 10.8 (or x times y) System.out.println(y/x);//makes 10 divided by 10.8 (or x divided by y) System.out.println(y%x);//makes 10 divided by 10.8 and takes the remainder System.out.println(y+1);//adds one to y } } HelloStatic.main(null); . Hello I am 10 years old 108.0 1.08 0.8000000000000007 11.8 . A char is basically just any character | Boolean gives out a true or false answer | int is an integer | double is a decimal value | A string is not a primitive | Code.org . all classes have to be named with each word in the class name being capitalized (pascal case) | object is a variable that defines the type of value when called | class &quot;blueprint&quot; to make objects | parameter is a value for a method or constructor | argument is a class instance | an if loop can be used to see if the painter needs to continue moving | constructor is named after the class and is the instructions to make a new object | to instantiate an object go ClassName objectName = new ClassName(); | to call an object do objectname.action(); | void method does the action but gives back no value |",
            "url": "https://lychee80.github.io/Test/2022/12/01/primitives.html",
            "relUrl": "/2022/12/01/primitives.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Precis",
            "content": "Serafina Wong . Jenkins . APEL : Period 2 . 20 August 2022 . Joel Stein Precis . In the opinion article,“Op-Ed: We’re teaching kids to follow their dreams. Maybe teach them to be helpful instead”, Joel Stein criticizes the common consensus that educators have about the need for teaching children to focus more on working hard and reaching their goal; and asserts that instead they should teach them to strive for any actual specific achievement to be made that would help benefit society and better the world. To do such a thing, Stein uses an anecdote over the course of his article, talking about his time attending his son’s re-enactment of famous figures at school and his utter bafflement at the issues he saw. This can be seen in his commentary on one of the presentations there, writing, “Ruth Bader Ginsburg did not toil to be one of the first female Supreme Court justices; she fought to expand the rights of all women.” Stein does this in order to show the wrong focus that the kids had on these stories, with instead of adding emphasis to the historical figures’ accomplishments, emphasizing instead the importance of persevering to reach their goals. By using this anecdote, Stein manages to show the utter strangeness of focusing on hard work instead of the importance of “being helpful” when talking about all the good and significant changes these figures made. By giving an anecdote relating to these already well known figures, Stein manages to add more persuasiveness to his message as the audience already knows about who these people are and what they’ve done, which helps them instantly connect to what Stein is trying to get at. Furthermore, by using an actual example of something he has witnessed before, Stein increases the effectiveness of his argument as it is harder to argue against practical knowledge vs just theoretical ones. In addition to this, Stein also uses humor and colloquial language in order to keep a relative lightheartedness in his article. This can be seen in his example about Gandhi, “His [Gandhi] strengths were, in fact, about restraining himself from doing all the things he wanted to do, like punch British soldiers and eat dal.” When Stein gives his example about Gandhi, he uses a funny way of arguing his point and uses colloquial speech such as “like”. This informal speech and humor helps Stein seem more down to earth and relatable, increasing his ethos and making his audience more receptive to his argument. This informal tone is especially important as compared to a formal or patronizing tone, it is easier to get someone to listen to your points if they feel like they are an equal with you. Overall, Stein throughout this article keeps up a incredulous tone as he works to convince educators that this way of thinking about favoring vague perseverance over specific, helpful goals has to be changed in order to have a more productive society. .",
            "url": "https://lychee80.github.io/Test/2022/12/01/precis.html",
            "relUrl": "/2022/12/01/precis.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Images Array (kitten)",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;kitten&quot;; String in = &quot;ghtop_images/&quot;; String out = &quot;ghtop_images/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i=i+3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics kitten = new Pics(&quot;kitten&quot;, &quot;png&quot;); kitten.printStats(&quot;Original&quot;); kitten.resize(33); kitten.printStats(&quot;Scaled&quot;); kitten.convertToAscii(); } } Pics.main(null); . Original: 39904 768x326 ghtop_images/kitten.png Scaled: 68772 253x108 ghtop_images/kitten.png . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class gray extends Pics{ @OVERRIDE public void Pics(String name, String ext) { Super.ext = ext; Super.inFile = this.inDir + name + &quot;.&quot; + ext; this.grayscale = this.outDir + name + &quot;grayscale.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void grayscale() { try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int pixVal = (((int)(col.getRed() * 0.30) + (int)(col.getBlue() * 0.59) + (int)(col .getGreen() * 0.11))); Color rgb = new Color(pixVal,pixVal,pixVal); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.grayscale)); } catch (IOException e) { } } Pics kitten = new Pics(&quot;kitten&quot;, &quot;png&quot; ); kitten.gray(); } Pics.main(null); } . | public Pics(String name, String ext) { invalid method declaration; return type required | kitten.gray(); &lt;identifier&gt; expected .",
            "url": "https://lychee80.github.io/Test/2022/12/01/kittenimage.html",
            "relUrl": "/2022/12/01/kittenimage.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Hello World",
            "content": "public class HelloStatic { public static void main(String[] args){ System.out.println(&quot;Hello World&quot;); } } HelloStatic.main(null); . Hello World .",
            "url": "https://lychee80.github.io/Test/2022/12/01/javaHelloworld.html",
            "relUrl": "/2022/12/01/javaHelloworld.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Java notes",
            "content": "Primitives vs Non-primitives . primitives Non-primitives . Predefined | done by you | . lowercase | uppercase | . &quot;Primitives&quot; | &quot;Reference types&quot; | . cannot call methods | can call methods | . value | can be null | . different sizes based on which primitive it is | all same size | . Variable . Variable names must use camelCase while method names use PascalCase | Variable names are called identifiers | Integers are used in byte,short, int, and long | The amount of digits able to be used is in order from longest to shortest ^ | Decimals are used with float and double | Typically for doubles,longs, and floats you need to have d, f, or &quot;L&quot; after the value but it works just fine normally without it (except for in floats- floats you need it) | Float vs Double is that float is a lot more specific (less decimal places) | chars also work for ascii values | . public class Main { public static void main(String[] args) { int num; num=20; //can define the variable later System.out.println(num);//the num is a parameter so you don&#39;t need null (though if you do use null, nothing will show) System.out.println(&quot;Hello&quot;); System.out.println(&quot;How are you?&quot;); System.out.print(&quot;Will this be on another line?&quot;); //System.out.print won&#39;t print the next line on another line unlike System.out.println() //but the next line &quot;Hello&quot; will be on a different line than &quot;How are you&quot; but //&quot;Will this be on another line&quot; won&#39;t System.out.println(&quot; No&quot;); /* This is a multiline comment unlike // */ } } Main.main(null); . 20 Hello How are you? Will this be on another line? No . public class Main { public static void main(String[] args) { int p = 15; int m = 30; //will overwrite the existing value final int z = p * m; //final makes it so it is impossible to overwrite System.out.println(z); char letter = &#39;M&#39;; //char is for a single letter and needs to be in single quotes float check= 4.99f; System.out.println(check); String color = &quot;red&quot;; String shape = &quot;triangle&quot;; String description = color + shape; System.out.println(description); System.out.println(p*m);// can do this or define for another value ex z System.out.println(color.concat(shape));//concatenation } } Main.main(null); . 450 4.99 redtriangle 450 redtriangle . public class Main { public static void main(String[] args) { double a=3.2, b=2.0, c=9.444; //can define all together too double e, f; e=f=0.88e4; // can define them together too, e4 or E4 means .88 x 10^4 System.out.println(a); System.out.println(e); char ascii= 89, x=90; System.out.println(ascii); System.out.println(x); } } Main.main(null); . 3.2 8800.0 Y Z . Casting . widening (automatic) short to large type byte to short to char to int to long to float to double | narrowing (manual, need to declare) opposite ^ . | null means that there is no parameter but we are acknowledging that there is . | . public class Main { public static void main(String[] args){ int shallot = 9; double shallots=shallot; //casting widening (changing from 9 --&gt; 9.0) System.out.println(shallot); System.out.println(&quot;to&quot;); System.out.println(shallots + &quot; n&quot;); double cups=9.22; int cup = (int)cups;//casting narrowing (changing from 9.22--&gt; 9) System.out.println(cups); System.out.println(&quot;to&quot;); System.out.println(cup); } } Main.main(null) . 9 to 9.0 9.22 to 9 . Operators . addition, subtraction, multiplication, division, modulus, increment, decrement (+, -, *, /, %, ++, --) | Assignment operators: =, +=, -=, *=, /=, %=, &amp;= | . Switches . switch(expression) { case x: // code block break; case y: // code block break; default: // code block } . Strings . if you add strings --&gt; concatenation | if you add numbers --&gt; number | In a string you can use &#39; to make &#39; | &quot; to make &quot; | to make | n for a new line | . public class Check { public static void } Check.main(null); . Code.org . to insubstantiate do : ClassName objectName = new ClassName(); | syntax for inheritence is public class Subclass extends SuperClass { . public Subclass() { . super(); . } } . | Method Signature is name of method and parameter . | void function means that it will do the code then stop | sub class is the child of the parent (super) | .",
            "url": "https://lychee80.github.io/Test/2022/12/01/java-notes.html",
            "relUrl": "/2022/12/01/java-notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java Lesson",
            "content": "Resources: W3 schools (java) . If-Else statements . if is used to say that if a condition is true then execute the code | else is to say that execute this code if the condition is false | else if is to make a new condition if the condition for the first if is false | Ifs can use several conditions such as: less than (&lt;), less than or equal to (&lt;=), greater than (&gt;), greater than or equal to (&gt;=), equal to (==), not equal (!=) | . if statement . class Main { public static void main(String[] args) { System.out.println(&quot;Book reviews from 1-10 stars&quot;); int review; review =1; if(review ==1){ // if the review is one star, which it is, it will output that this is a bad book System.out.println(&quot;This is a bad book&quot;); } } } Main.main(null); . Book reviews from 1-10 stars This is a bad book . if-else statement . class Main { public static void main(String[] args) { System.out.println(&quot;Book reviews from 1-10 stars&quot;); int review; review =8; if(review &gt; 7 ){ //if the review is greater than seven stars, then this is a good book System.out.println(&quot;This is a good book&quot;); } else { //if the review is less than seven stars then it is a not so good book System.out.println(&quot;This is a not so good book&quot;); } } } Main.main(null); . Book reviews from 1-10 stars This is a good book . if else-if else statement . class Main { public static void main(String[] args) { System.out.println(&quot;Book reviews from 1-10 stars&quot;); int review; review =8; if(review &gt; 7 ){ //if the review is greater than seven stars, then this is a good book System.out.println(&quot;This is a good book&quot;); } else if (review&gt;4) { //if the review is between four and seven stars, then it is an ok book System.out.println(&quot;This is an ok book&quot;); } else { // if the review is below four stars then it is a bad book System.out.println(&quot;This is a bad book&quot;); } } } Main.main(null); . Book reviews from 1-10 stars This is a good book . if-else statements with five conditions . import java.util.Scanner; class Main { public static void main(String[] args) { System.out.println(&quot;Input age&quot;); // Asks the user to input their age Scanner age = new Scanner(System.in); // Makes a new scanner named age (insubstantiates object) int option =age.nextInt(); // Will take in the value that the user inputs and declares it an integer called option if(option==16){ //if the user is specifically 16 years old, output &quot;You can drive!&quot; System.out.println(&quot;You can drive!&quot;); } else if (option==21){//if the user is specifically 21 years old, output &quot;You can drink!&quot; System.out.println(&quot;You can drink!&quot;); } else if (option== 18 ){//if the user is specifically 18 years old, output &quot;You can vote!&quot; System.out.println(&quot;You can vote!&quot;); } else if (option&gt;= 18){//if the user is older than 18 years old, output &quot;You are an adult&quot; System.out.println(&quot;You are an adult&quot;); } else if (option&lt;=13){//if the user is younger than 13 years old, output &quot;You are a child&quot; System.out.println(&quot;You are a child!&quot;); } else { //if the user is between 13 years old and 18 years old, output &quot;You are a teenager&quot; System.out.println(&quot;You are a teenager&quot;); } } } Main.main(null); . Input age You are a teenager . Switch Statements . Describes several cases to execute if they match the condition | always requires a break after each case to stop | default is sort of like the else in if-else where if all conditions are false then do this | . import java.util.Scanner; class Main { public static void main(String[] args) { Scanner object = new Scanner(System.in); // Makes a new scanner named object (insubstantiates object) int condition =object.nextInt(); // Will take in the value that the user inputs and declares it an integer called condition switch(condition) { case 1: //if the review is one star, then this is a bad book System.out.println(&quot;This is a bad book&quot;); break; case 2: //if the review is two stars, then this is a bad book System.out.println(&quot;This is a bad book&quot;); break; case 3: //if the review is three stars, then this is a bad book System.out.println(&quot;This is a bad book&quot;); break; case 4: //if the review is four stars, then this is a bad book System.out.println(&quot;This is a bad book&quot;); break; case 5: //if the review is five stars, then this is an ok book System.out.println(&quot;This is an ok book&quot;); break; case 6: //if the review is six stars, then this is an ok book System.out.println(&quot;This is an ok book&quot;); break; case 7: //if the review is seven stars, then this is an ok book System.out.println(&quot;This is an ok book&quot;); break; case 8: //if the review is eight stars, then this is a great book System.out.println(&quot;This is a great book&quot;); break; case 9: //if the review is nine stars, then this is a great book System.out.println(&quot;This is a great book&quot;); break; case 10: //if the review is ten stars, then this is a great book System.out.println(&quot;This is a great book&quot;); break; default://if the review is not in a range of 1-10 then prompt the user to retype in that range System.out.println(&quot;Choose in a range between 1-10&quot;); } } } Main.main(null); . This is a bad book . De Morgan&#39;s law . a law of negation | like the math distributive property, you will negate each part of a statement | use of operators like &amp;&amp; for And and || for or as well as ! for not | &amp;&amp; means both conditions must be true to be true | || means only one of the conditions needs to be true to output true | ! means that this condition is false | . class Main { public static void main(String[] args) { Boolean review= false; // No review was made Boolean book = true; // The book was read though System.out.println(review); //will give out a value of false (the value of review) System.out.println(book); //will give out a value of true (the value of book) System.out.println(review &amp;&amp; book);// will give a value of false since review is false so review and book are not both true System.out.println(review || book);//will give true since book is true so it satisfies the condition of the or operator System.out.println(!(review &amp;&amp; book));//will give true since what is being evaluated is (true || false) System.out.println(!(review || book));//will give false since what is being evaluated is (true &amp;&amp; false) } } Main.main(null); . false true false true true false .",
            "url": "https://lychee80.github.io/Test/2022/12/01/java-lessons.html",
            "relUrl": "/2022/12/01/java-lessons.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Images Array (Mona Lisa)",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;MonaLisa&quot;; String in = &quot;ghtop_images/&quot;; String out = &quot;ghtop_images/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i=i+3) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 ghtop_images/MonaLisa.png Scaled: 55625 128x136 ghtop_images/MonaLisa.png . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String grayscale; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.grayscale = this.outDir + name + &quot;grayscale.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void grayscale() { BufferedImage img; try { File file = new File(this.grayscale); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int pixVal = (((int)(col.getRed() * 0.30) + (int)(col.getBlue() * 0.59) + (int)(col .getGreen() * 0.11))); Color rgb = new Color(pixVal,pixVal,pixVal); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.grayscale)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;monaLisa&quot;, &quot;png&quot; ); monaLisa.grayscale(); } } Pics.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String green; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.green = this.outDir + name + &quot;green.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void green() { BufferedImage img; try { File file = new File(this.green); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed() * 0); int green = (int)(col.getGreen()); int blue = (int)(col.getBlue() * 0); Color rgb = new Color(0,green,0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.green)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.green(); } } Pics.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String red; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.red = this.outDir + name + &quot;red.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void red() { BufferedImage img; try { File file = new File(this.red); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()); int green = (int)(col.getGreen()*0); int blue = (int)(col.getBlue() * 0); Color rgb = new Color(red,0,0); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.red)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.red(); } } Pics.main(null); . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/&quot;; // location of created files private String inFile; private String resizedFile; private String blue; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.blue = this.outDir + name + &quot;blue.&quot; + ext; } // convert every pixel to an ascii character (ratio does not seem correct) public void blue() { BufferedImage img; try { File file = new File(this.blue); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); int red = (int)(col.getRed()*0); int green = (int)(col.getGreen()*0); int blue = (int)(col.getBlue() ); Color rgb = new Color(0,0,blue); img.setRGB(j, i, rgb.getRGB()); } } ImageIO.write(img, &quot;png&quot;, new File(this.blue)); } catch (IOException e) { } } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot; ); monaLisa.blue(); } } Pics.main(null); . Here are the links to the images: Mona Lisa ASCI,Mona Lisa Grayscale,Mona Lisa Green,Mona Lisa Red,Mona Lisa Blue .",
            "url": "https://lychee80.github.io/Test/2022/12/01/images.html",
            "relUrl": "/2022/12/01/images.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Array Unit Hw",
            "content": "Swap . import java.util.Arrays; public class Array { public static void main(String[] args) { int[] array = {1, 2, 3, 4, 5, 6 , 7 ,8 ,9, 10}; for(int i=0;i&lt;array.length;i++) System.out.print(array[i] + &quot; &quot;); System.out.println(&quot; n&quot;+ &quot;To&quot;); for(int i=array.length-1;i&gt;=0;i--) System.out.print(array[i] + &quot; &quot;); } } Array.main(null); . 1 2 3 4 5 6 7 8 9 10 To 10 9 8 7 6 5 4 3 2 1 . Check for Duplicates . import java.util.Arrays; public class Array { public static void main(String[] args) { int[] array = {1, 2, 3, 4, 5, 4, 3}; System.out.println(&quot;Duplicate Numbers:&quot; ); for (int i = 0; i &lt; array.length-1; i++) { for (int j = i+1; j &lt; array.length; j++) { if ((array[i] == array[j]) &amp;&amp; (i != j)) { System.out.println(array[j]); } } } } } Array.main(null); . Duplicates: 3 4 .",
            "url": "https://lychee80.github.io/Test/2022/12/01/hw.html",
            "relUrl": "/2022/12/01/hw.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Grades",
            "content": "Name Grade Comment . Aadya | .93 | Finished homework and did some notes | . Shreya | .96 | Took lots of notes did homework problems | . Bria | 1.0 | Took lots of notes and did extra problems | . Don | 1.0 | Took lots of notes and did extra problems | . Nathan | 1.0 | Took lots of notes and did extra problems | . Krish | .90 | Finished homework and satisfies requirements | . Nicholas | .90 | Finished homework and satisfies requirements | . Alice | .96 | Took some notes and did homework problems | . Samaya | .93 | Took some notes and did homework problems | . Sarayu | .93 | Took some notes and did homework problems | . Iris | .90 | Finished homework and satisfies requirements | . Ellie | .96 | Finished homework and took lots of notes | . Tianbin | .90 | Finished homework and satisfies requirements | . Daniel | .93 | Did pair coding and added in vocab | . Allie | .93 | Took some notes and did homework problems | . Soren | .90 | Finished homework and satisfies requirements (weird way of submitting) | . Sophie | .90 | Finished homework and satisfies requirements | . Braeden | .90 | Finished homework and satisfies requirements | . Aarav | 1.0 | Took lots of notes and did extra problems | . Tigran | .90 | Finished homework and satisfies requirements | . Rohan | .90 | Finished homework and satisfies requirements | . Aryan | .93 | Finished homework and did some notes(couldn&#39;t find assignment had search ) | . Everitt | 1.0 | Finished homework and did extra problems | . Adi | .90 | Finished homework and satisfies requirements | . Aadit | .90 | Finished homework and satisfies requirements | . Natalie | 1.0 | Finished homework and did extra problems | . Yash | .90 | Finished homework and satisfies requirements(slightly late but submitted before 12/1) | . Dylan | .80 | Finished homework and satisfies requirements but late | . Aiden | .80 | Finished homework and satisfies requirements but late | . Jun | .80 | Finished homework and satisfies requirements but late | .",
            "url": "https://lychee80.github.io/Test/2022/12/01/grades.html",
            "relUrl": "/2022/12/01/grades.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Fibo code",
            "content": "Teacher&#39;s code . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . public class FibonacciFor extends Fibo { public static void main(String[] args) { // Set it to the number of elements you want in the Fibonacci Series int tries = 15; int num1 = 0; int num2= 1; System.out.print(&quot;Fibonacci series: &quot;); for (int i = 1; i &lt;= tries; i++) { System.out.print(num1+&quot; &quot;); int overall = num1 + num2; num1 = num2; num2 = overall; } Fibo fib = new Fibo(); fib.print(); } } FibonacciFor.main(null); . Fibonacci series: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . //Using While Loop public class FibonacciWhile extends Fibo { public static void main(String[] args) { int tries = 15; int num1 = 0; int num2 = 1; System.out.print(&quot;Fibonacci Series of &quot;+tries+&quot; numbers:&quot;); int i=1; while(i &lt;= tries) { System.out.print(num1+&quot; &quot;); int sum = num1 + num2; num1 = num2; num2 = sum; i++; } Fibo fib = new Fibo(); fib.print(); } } FibonacciWhile.main(null); . Fibonacci Series of 15 numbers:0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . //Using Recursion public class FibonacciRecursion extends Fibo { public static int fibonacciRecursion(int n){ if(n == 0){ return 0; } if(n == 1 || n == 2){ return 1; } return fibonacciRecursion(n-2) + fibonacciRecursion(n-1); } public static void main(String args[]) { int maxNumber = 10; System.out.print(&quot;Fibonacci Series: &quot;); for(int i = 0; i &lt; maxNumber; i++){ System.out.print(fibonacciRecursion(i) +&quot; &quot;); } Fibo fib = new Fibo(); fib.print(); } } FibonacciRecursion.main(null); . Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://lychee80.github.io/Test/2022/12/01/fibo.html",
            "relUrl": "/2022/12/01/fibo.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Console",
            "content": "import java.util.Scanner; class Console { public static void main(String[] args) { System.out.println(&quot;Quick Calculations!&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Option 1-2 for circle related problems, Options 3-4 for imperial to metric calculations, Option 5 for metric to imperial calculations&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Choose one of the following options: &quot;); System.out.println(&quot;Option 1: Calculating the Circumference of a circle &quot;); System.out.println(&quot;Option 2: Calculating the area of a circle &quot;); System.out.println(&quot;Option 3: Calculating Celsius from Fahrenheit &quot;); System.out.println(&quot;Option 4: Calculating Centimeters from Inches &quot;); System.out.println(&quot;Option 5: Calculating feet to kilometers &quot;); System.out.println(&quot;To escape: choose any other key on the keyboard&quot;); Scanner object = new Scanner(System.in); int option =object.nextInt(); if(option==1){ System.out.println(&quot;Calculating the Circumference of a circle&quot;); System.out.println(&quot;Enter Radius&quot;); int radius = object.nextInt(); double pi= 3.14; System.out.println(radius * pi * 2); } else if (option==2){ System.out.println(&quot;Calculating the area of a circle&quot;); System.out.println(&quot;Enter Radius&quot;); int radi = object.nextInt(); double pi= 3.14; double area = Math.pow(radi, 2); System.out.println(area * pi ); } else if (option==3){ System.out.println(&quot;Calculating Celsius&quot;); System.out.println(&quot;Enter a temperature in Fahrenheit &quot;); int temperature = object.nextInt(); int b= temperature-32; System.out.println(b *5/9+ &quot; degrees Celsius&quot;); }else if (option==4){ System.out.println(&quot;Calculating Centimeters&quot;); System.out.println(&quot;Enter a measurement in inches &quot;); int inches = object.nextInt(); double c= inches*2.54; System.out.println(c + &quot; Centimeters&quot;); }else if (option==5){ System.out.println(&quot;Calculating feet&quot;); System.out.println(&quot;Enter a measurement in kilometers &quot;); int kilometers = object.nextInt(); double k= kilometers*3280.84; System.out.println(k + &quot; feet&quot;); } else { System.out.println(&quot;Quitting system&quot;); } } } Console.main(null); . Quick Calculations! Option 1-2 for circle related problems, Options 3-4 for imperial to metric calculations, Option 5 for metric to imperial calculations Choose one of the following options: Option 1: Calculating the Circumference of a circle Option 2: Calculating the area of a circle Option 3: Calculating Celsius from Fahrenheit Option 4: Calculating Centimeters from Inches Option 5: Calculating feet to kilometers To escape: choose any other key on the keyboard Calculating the area of a circle Enter Radius 28.26 . import java.util.Scanner; class Console { public static void main(String[] args) { System.out.println(&quot;Quick Calculations!&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Option 1-2 for circle related problems, Options 3-4 for imperial to metric calculations, Option 5 for metric to imperial calculations&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Choose one of the following options: &quot;); System.out.println(&quot;Option 1: Calculating the Circumference of a circle &quot;); System.out.println(&quot;Option 2: Calculating the area of a circle &quot;); System.out.println(&quot;Option 3: Calculating Celsius from Fahrenheit &quot;); System.out.println(&quot;Option 4: Calculating Centimeters from Inches &quot;); System.out.println(&quot;Option 5: Calculating feet to kilometers &quot;); System.out.println(&quot;To escape: choose any other key on the keyboard&quot;); Scanner object = new Scanner(System.in); int option =object.nextInt(); do { if(option==1){ System.out.println(&quot;Calculating the Circumference of a circle&quot;); System.out.println(&quot;Enter Radius&quot;); int radius = object.nextInt(); double pi= 3.14; System.out.println(radius * pi * 2); break; } else if (option==2){ System.out.println(&quot;Calculating the area of a circle&quot;); System.out.println(&quot;Enter Radius&quot;); int radi = object.nextInt(); double pi= 3.14; double area = Math.pow(radi, 2); System.out.println(area * pi ); break; } else if (option==3){ System.out.println(&quot;Calculating Celsius&quot;); System.out.println(&quot;Enter a temperature in Fahrenheit &quot;); int temperature = object.nextInt(); int b= temperature-32; System.out.println(b *5/9+ &quot; degrees Celsius&quot;); break; }else if (option==4){ System.out.println(&quot;Calculating Centimeters&quot;); System.out.println(&quot;Enter a measurement in inches &quot;); int inches = object.nextInt(); double c= inches*2.54; System.out.println(c + &quot; Centimeters&quot;); break; }else if (option==5){ System.out.println(&quot;Calculating feet&quot;); System.out.println(&quot;Enter a measurement in kilometers &quot;); int kilometers = object.nextInt(); double k= kilometers*3280.84; System.out.println(k + &quot; feet&quot;); break; }else { System.out.println(&quot;Quitting system&quot;); break; } } while (option&gt;0); System.out.println(&quot;Quitting system&quot;); } } Console.main(null); . Quick Calculations! Option 1-2 for circle related problems, Options 3-4 for imperial to metric calculations, Option 5 for metric to imperial calculations Choose one of the following options: Option 1: Calculating the Circumference of a circle Option 2: Calculating the area of a circle Option 3: Calculating Celsius from Fahrenheit Option 4: Calculating Centimeters from Inches Option 5: Calculating feet to kilometers To escape: choose any other key on the keyboard Calculating the Circumference of a circle Enter Radius 18.84 Quitting system . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;Fun facts about animals&quot;); System.out.println(&quot;Press 1 to learn about dogs&quot;); System.out.println(&quot;Press 2 to learn about cats&quot;); System.out.println(&quot;Press 3 to learn about turtles&quot;); System.out.println(&quot;Press 4 to learn about seals&quot;); System.out.println(&quot;Press 0 to end session&quot;); } private boolean action(int selection) { boolean quit = false; switch (selection) { case 0: System.out.print(&quot;Thank you&quot;); quit = true; break; case 1: System.out.println(&quot;Dogs sweat their the bottoms of their feet &quot;); System.out.println(&quot;9% of dog owners will throw a birthday party for them&quot;); break; case 2: System.out.println(&quot;Cats have 64 muscles in their ears and four whiskers &quot;); System.out.println(&quot;Cats have no collarbones&quot;); break; case 3: System.out.println(&quot;A turtle has over 50 bones in their shell&quot;); System.out.println(&quot;Depending on where it lives, turtles can eat different things - meaning they can be herbivores, carnivores, or both&quot;); break; case 4: System.out.println(&quot;They can be cannibalistic such as the Leopard Seal which is known for hunting its own kind&quot;); System.out.println(&quot;A seal&#39;s milk is extremely fatty and its because of this that baby seals are able to gain 2kg/day&quot;); break; default: System.out.print(&quot;Invalid: Try again&quot;); } System.out.println(DEFAULT); // return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . Fun facts about animals Press 1 to learn about dogs Press 2 to learn about cats Press 3 to learn about turtles Press 4 to learn about seals Press 0 to end session 1: Dogs sweat their the bottoms of their feet 9% of dog owners will throw a birthday party for them 2: Cats have 64 muscles in their ears and four whiskers Cats have no collarbones 3: A turtle has over 50 bones in their shell Depending on where it lives, turtles can eat different things - meaning they can be herbivores, carnivores, or both 4: They can be cannibalistic such as the Leopard Seal which is known for hunting its own kind A seal&#39;s milk is extremely fatty and its because of this that baby seals are able to gain 2kg/day 5: Invalid: Try again 0: Thank you .",
            "url": "https://lychee80.github.io/Test/2022/12/01/console-copy.html",
            "relUrl": "/2022/12/01/console-copy.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 1-5 Blog",
            "content": "Unit Homework . Unit Grade Link . 1 | 1.0 (Teacher) | Grading | . 2 | 1.0 | Unit 2 Hw | . 3 | 0.9 | Unit 3 Hw | . 4 | 1.0 | Unit 4 Hw | . 5 | 1.0 | Unit 5 Hw | . Total score: 4.9/5 . Casting . Changing the value from one data type to another. There are two types of casting including automatic and manual depending on whether you are going from a bigger data type to a smaller data type or vice versa byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double (The biggest) . public class Main { public static void main(String args[]) { int myNum = (int)(.2 + 0.5); System.out.println(myNum); // use of casting truncating System.out.println((double) 1 / 3); // use of casting for division double myDouble = 1.9; int myInt = (int) myDouble;//larger to smaller and so needs manual casting System.out.println(myInt); double automatic = myInt; //smaller to larger and so is automatic and you don&#39;t need to declare System.out.println(automatic) } } Main.main(null); . 0 0.3333333333333333 1 1.0 . Wrapper Classes . A way to change primitives into objects for use in things like arrayLists. This is helpful since in collection objects, you will not be bale to use primitive types. . Primitive Wrapper Class . byte | Byte | . short | Short | . int | Integer | . long | Long | . float | Float | . double | Double | . boolean | Boolean | . char | Character | . public class Main { public static void main(String args[]) { ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();// here we must use the wrapper class, had we have changed Integer with int the arrayList wouldn&#39;t have work numbers.add(100); System.out.println(numbers); Double myNum= 3.09; // This will make a wrapper object as we have used the wrapper class and not the primitive dataType // We can get the value of this object in two ways System.out.println(myNum); // just printing the object System.out.println(myNum.doubleValue());// or by using the object method to return the value } } Main.main(null); . [100] 3.09 3.09 . Concatenation . It can be used to adjoin strings together or strings with primitives and objects. This can be done using the + operator . public class Main { public static void main(String args[]) { int myNum= 20; String details= &quot;This number is larger than ten&quot;; System.out.println(&quot;This is my number: &quot;+ 20+ &quot;. &quot;+ details); } } Main.main(null); . This is my number: 20. This number is larger than ten . Math class . A static class that with use of primitives can be used to do more complex calculations than just operators and can also allow for random number generation . public class Main { public static void main(String args[]) { int x= 10; int y=20; System.out.println(Math.max(x,y));//finds the maximum number between the two integers System.out.println(Math.min(x,y));//finds the minimum number between the two integers System.out.println((int)Math.sqrt(x*y));// this finds the square root of 200. This will return a double and so because a double is bigger than an int we will need to cast this to return a whole number System.out.println(Math.abs(x-y));// finds the absolute value System.out.println(Math.random());// this finds a random number between 0 and 1 System.out.println((int)(Math.random()* 101));// However the range can be changed by multipling the random value (Here the value will have a range of 0-100) } } Main.main(null); . 20 10 14 10 0.5247222164310595 66 . Compound Boolean Expression and De Morgan&#8217;s Law . You can combine booleon expressions through use of AND (&amp;&amp;)or OR(||). If you use AND, then in this case the boolean will only return true if both expressions are true. However, if you use OR, the expression will return true if at least one expression is true. You can also use the NOT(!) operator which will make it so if the expression is true, it is now false and vice versa. De Morgan&#39;s law is basically the distributive property but in terms of booleans so just as you would distribute 3(x+1), you would distribute !(true &amp;&amp; false) . public class Main { public static void main(String args[]) { int x= 10; int y=20; int z =30; if(!((x&gt;0)&amp;&amp;(x&lt;y))||z&gt;0){ // Check notes below System.out.println(&quot;Hello World&quot;); } if(!true || true ){ System.out.println(&quot;Hello World&quot;); } } } Main.main(null); . Hello World Hello World . A big mistake is that people often think that !(x&lt;0) gives x&lt;0. This is false because the opposite of less than is not greater than but greater than or equals to. This also works vice versa. Additionally, !&amp;&amp; would become || while !|| will become &amp;&amp; . Truth Tables . Can be used to visualize boolean outputs . Comparing Numbers vs Comparing Strings . When comparing numbers we use == but when comparing strings we must use .equals . public class Main { public static void main(String args[]) { int x= 10; int y=20; String day= &quot;Today will be a good day&quot;; String friday= &quot;Today will be a good day&quot;; String week= &quot;Today will be a good week&quot;; System.out.println(x==y); System.out.println(day.equals(friday)); System.out.println(day.equals(week)); } } Main.main(null); . false true false . Comparing Objects . you can use either .equals or == depending on what you are using . public class Date { String month; int day; int week; Date(String month, int week, int day){ this.month= month; this.week=week; this.day=day; } public static void main(String[] args) { Date today= new Date(December,1, 1); Date tomorrow= new Date(December,1, 2); System.out.println(today.equals(tomorrow)); } } . for loop . For as long as something is true, do this . public class Main { public static void main(String[] args) { for(int i=0; i&lt;5; i++ ){ System.out.println(i); } String[] fruits={&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;pineapple&quot;, &quot;guava&quot;}; for(int i=0; i&lt;fruits.length; i++){ System.out.println(fruits[i]); } } } Main.main(null); . 0 1 2 3 4 apple orange banana pineapple guava . enhanced for loop . A for loop used specifically for arrays . public class Main { public static void main(String[] args) { String[] fruits={&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;, &quot;pineapple&quot;, &quot;guava&quot;}; for(String i: fruits){ //easier way to iterate through the array System.out.println(i); } } } Main.main(null); . apple orange banana pineapple guava . while loop versus do while loop: . A while loop will do an action for as long as the statement is true. A big mistake most people do is to forget to change the statement to false at some point because or else you have an infinite while loop and your computer will crash. A do while loop is different in that it first does the commands and then checks to see if the statement is true to decided whether or not to continue . public class Main { public static void main(String[] args) { int i=0; while(i&lt;5){ System.out.println(i); i++; } System.out.println(&quot;&quot;); int x=-1; do{ System.out.println(x);// this will print out x as -1 before incrementing it to x=0 x++; }while(x&lt;0);// now that x= 0, it no longer fits the condition and so the loop will terminate } } Main.main(null); . 0 1 2 3 4 -1 . nested loops . Nested loops are loops inside of other loops . public class Main { public static void main(String[] args) { int weeks =2; int days= 7; for(int x =1; x&lt;=weeks; x++){ System.out.println(&quot;&quot;); System.out.println(&quot;week &quot; + x); System.out.println(&quot;&quot;); for(int i=0; i&lt;+ days; i++){ System.out.println(&quot;days &quot;+i); } } } } Main.main(null); . week 1 days 0 days 1 days 2 days 3 days 4 days 5 days 6 week 2 days 0 days 1 days 2 days 3 days 4 days 5 days 6 . Class, Methods, Objects, Constructors . Class- defines a new data type like a blueprint | Object- specific instance of a class with defined attributes | Behaviors or methods- defines what an object can do | Attributes or instance variables defines what the object knows about itself | Dot operator (.) is used to run an object’s method. You can think of the (.) as asking the object to do something (execute one of its methods). | To create or declare a new object, write: ClassName variableName = new ClassName(arguments); | Make a class→ then can make many objects | Parameters refers to the list of variables in a method declaration. | Arguments are the actual values that are passed in when the method is invoked. | describe Naming Conventions: A class&#39; naming conventions is pascal case | Constructor, describe why there is no return: A constructor is the another method to initalize objects for when an object is created and used to make the first attributes of an object, this is why there is no return | . public class Main {// class must have each name in it capitalized int x = 5;// attribute public Main(){// a constructor int y=6; // assigning the value to the object } public static void main(String[] args) { Main myNum = new Main();// declaring an object System.out.println(myNum.x); } } Main.main(null); . 5 . public class Main { // Static static void staticMethod() { System.out.println(&quot;An apple is a fruit&quot;); } // Public method public void PublicMethod() { System.out.println(&quot;An orange is a fruit&quot;); } // Main method public static void main(String[ ] args) { StaticMethod(); Main fruit = new Main(); // Need to create an object fruit.PublicMethod(); } } . Classes Access and Encapsulation . Java has many different types of access variables such as Private, default, protected, and public | private means that the access is restricted to that one class | Protected means that the access is restricted to every class in that package in subclasses if its not in that package | default has the regular access | public means from anywhere you can access this | static vs public : public you need an object to access the method and static you can access anywhere | Accessor methods- they are the getters of the methods and all you to get the values of any variables, they don&#39;t need parameters and will return a value so they are not void | Mutator methods however are teh setters and using them you can change the values of the variables, it is void since it will not return a value and will take parameters | . public class User { private String name; // private so it won&#39;t be accessible outside of this class // Accessor method public String getName() { return name; } // Mutator method public void setName(String newName) { this.name = newName; } } .",
            "url": "https://lychee80.github.io/Test/2022/12/01/blog.html",
            "relUrl": "/2022/12/01/blog.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Bash Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . java --version . openjdk 18.0.2 2022-07-19 OpenJDK Runtime Environment Homebrew (build 18.0.2+0) OpenJDK 64-Bit Server VM Homebrew (build 18.0.2+0, mixed mode, sharing) . javac --version . javac 18.0.2 . conda --version . conda 4.13.0 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . conda list . # packages in environment at /Users/serafinawong/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.5 py39hecd8cb5_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathlib 1.0.1 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.4.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.4.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check test=&quot;jupyter&quot; check=`conda list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/serafinawong/Library/Jupyter/kernels/bash java /Users/serafinawong/Library/Jupyter/kernels/java javascript /Users/serafinawong/Library/Jupyter/kernels/javascript python3 /Users/serafinawong/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; check=`jupyter kernelspec list | grep $test` n=${#check} if [[ ${n} &gt; 0 ]]; then echo &quot;$check&quot; else echo &quot;$test not found&quot; fi . python3 /Users/serafinawong/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://lychee80.github.io/Test/2022/12/01/bash-checks.html",
            "relUrl": "/2022/12/01/bash-checks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "API",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; //RapidAPI header https://rapidapi.com/spamakashrajtech/api/corona-virus-world-and-india-data HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://google-translate1.p.rapidapi.com/language/translate/v2/languages&quot;)) .header(&quot;x-rapidapi-key&quot;, &quot;95798f48fcmsheb95af41fb5e7a3p1cc503jsn1c033886f550&quot;) .header(&quot;x-rapidapi-host&quot;, &quot;google-translate1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //RapidAPI Body System.out.println(response.body()); . {&#34;data&#34;:{&#34;languages&#34;:[{&#34;language&#34;:&#34;af&#34;},{&#34;language&#34;:&#34;ak&#34;},{&#34;language&#34;:&#34;am&#34;},{&#34;language&#34;:&#34;ar&#34;},{&#34;language&#34;:&#34;as&#34;},{&#34;language&#34;:&#34;ay&#34;},{&#34;language&#34;:&#34;az&#34;},{&#34;language&#34;:&#34;be&#34;},{&#34;language&#34;:&#34;bg&#34;},{&#34;language&#34;:&#34;bho&#34;},{&#34;language&#34;:&#34;bm&#34;},{&#34;language&#34;:&#34;bn&#34;},{&#34;language&#34;:&#34;bs&#34;},{&#34;language&#34;:&#34;ca&#34;},{&#34;language&#34;:&#34;ceb&#34;},{&#34;language&#34;:&#34;ckb&#34;},{&#34;language&#34;:&#34;co&#34;},{&#34;language&#34;:&#34;cs&#34;},{&#34;language&#34;:&#34;cy&#34;},{&#34;language&#34;:&#34;da&#34;},{&#34;language&#34;:&#34;de&#34;},{&#34;language&#34;:&#34;doi&#34;},{&#34;language&#34;:&#34;dv&#34;},{&#34;language&#34;:&#34;ee&#34;},{&#34;language&#34;:&#34;el&#34;},{&#34;language&#34;:&#34;en&#34;},{&#34;language&#34;:&#34;eo&#34;},{&#34;language&#34;:&#34;es&#34;},{&#34;language&#34;:&#34;et&#34;},{&#34;language&#34;:&#34;eu&#34;},{&#34;language&#34;:&#34;fa&#34;},{&#34;language&#34;:&#34;fi&#34;},{&#34;language&#34;:&#34;fr&#34;},{&#34;language&#34;:&#34;fy&#34;},{&#34;language&#34;:&#34;ga&#34;},{&#34;language&#34;:&#34;gd&#34;},{&#34;language&#34;:&#34;gl&#34;},{&#34;language&#34;:&#34;gn&#34;},{&#34;language&#34;:&#34;gom&#34;},{&#34;language&#34;:&#34;gu&#34;},{&#34;language&#34;:&#34;ha&#34;},{&#34;language&#34;:&#34;haw&#34;},{&#34;language&#34;:&#34;he&#34;},{&#34;language&#34;:&#34;hi&#34;},{&#34;language&#34;:&#34;hmn&#34;},{&#34;language&#34;:&#34;hr&#34;},{&#34;language&#34;:&#34;ht&#34;},{&#34;language&#34;:&#34;hu&#34;},{&#34;language&#34;:&#34;hy&#34;},{&#34;language&#34;:&#34;id&#34;},{&#34;language&#34;:&#34;ig&#34;},{&#34;language&#34;:&#34;ilo&#34;},{&#34;language&#34;:&#34;is&#34;},{&#34;language&#34;:&#34;it&#34;},{&#34;language&#34;:&#34;iw&#34;},{&#34;language&#34;:&#34;ja&#34;},{&#34;language&#34;:&#34;jv&#34;},{&#34;language&#34;:&#34;jw&#34;},{&#34;language&#34;:&#34;ka&#34;},{&#34;language&#34;:&#34;kk&#34;},{&#34;language&#34;:&#34;km&#34;},{&#34;language&#34;:&#34;kn&#34;},{&#34;language&#34;:&#34;ko&#34;},{&#34;language&#34;:&#34;kri&#34;},{&#34;language&#34;:&#34;ku&#34;},{&#34;language&#34;:&#34;ky&#34;},{&#34;language&#34;:&#34;la&#34;},{&#34;language&#34;:&#34;lb&#34;},{&#34;language&#34;:&#34;lg&#34;},{&#34;language&#34;:&#34;ln&#34;},{&#34;language&#34;:&#34;lo&#34;},{&#34;language&#34;:&#34;lt&#34;},{&#34;language&#34;:&#34;lus&#34;},{&#34;language&#34;:&#34;lv&#34;},{&#34;language&#34;:&#34;mai&#34;},{&#34;language&#34;:&#34;mg&#34;},{&#34;language&#34;:&#34;mi&#34;},{&#34;language&#34;:&#34;mk&#34;},{&#34;language&#34;:&#34;ml&#34;},{&#34;language&#34;:&#34;mn&#34;},{&#34;language&#34;:&#34;mni-Mtei&#34;},{&#34;language&#34;:&#34;mr&#34;},{&#34;language&#34;:&#34;ms&#34;},{&#34;language&#34;:&#34;mt&#34;},{&#34;language&#34;:&#34;my&#34;},{&#34;language&#34;:&#34;ne&#34;},{&#34;language&#34;:&#34;nl&#34;},{&#34;language&#34;:&#34;no&#34;},{&#34;language&#34;:&#34;nso&#34;},{&#34;language&#34;:&#34;ny&#34;},{&#34;language&#34;:&#34;om&#34;},{&#34;language&#34;:&#34;or&#34;},{&#34;language&#34;:&#34;pa&#34;},{&#34;language&#34;:&#34;pl&#34;},{&#34;language&#34;:&#34;ps&#34;},{&#34;language&#34;:&#34;pt&#34;},{&#34;language&#34;:&#34;qu&#34;},{&#34;language&#34;:&#34;ro&#34;},{&#34;language&#34;:&#34;ru&#34;},{&#34;language&#34;:&#34;rw&#34;},{&#34;language&#34;:&#34;sa&#34;},{&#34;language&#34;:&#34;sd&#34;},{&#34;language&#34;:&#34;si&#34;},{&#34;language&#34;:&#34;sk&#34;},{&#34;language&#34;:&#34;sl&#34;},{&#34;language&#34;:&#34;sm&#34;},{&#34;language&#34;:&#34;sn&#34;},{&#34;language&#34;:&#34;so&#34;},{&#34;language&#34;:&#34;sq&#34;},{&#34;language&#34;:&#34;sr&#34;},{&#34;language&#34;:&#34;st&#34;},{&#34;language&#34;:&#34;su&#34;},{&#34;language&#34;:&#34;sv&#34;},{&#34;language&#34;:&#34;sw&#34;},{&#34;language&#34;:&#34;ta&#34;},{&#34;language&#34;:&#34;te&#34;},{&#34;language&#34;:&#34;tg&#34;},{&#34;language&#34;:&#34;th&#34;},{&#34;language&#34;:&#34;ti&#34;},{&#34;language&#34;:&#34;tk&#34;},{&#34;language&#34;:&#34;tl&#34;},{&#34;language&#34;:&#34;tr&#34;},{&#34;language&#34;:&#34;ts&#34;},{&#34;language&#34;:&#34;tt&#34;},{&#34;language&#34;:&#34;ug&#34;},{&#34;language&#34;:&#34;uk&#34;},{&#34;language&#34;:&#34;ur&#34;},{&#34;language&#34;:&#34;uz&#34;},{&#34;language&#34;:&#34;vi&#34;},{&#34;language&#34;:&#34;xh&#34;},{&#34;language&#34;:&#34;yi&#34;},{&#34;language&#34;:&#34;yo&#34;},{&#34;language&#34;:&#34;zh&#34;},{&#34;language&#34;:&#34;zh-CN&#34;},{&#34;language&#34;:&#34;zh-TW&#34;},{&#34;language&#34;:&#34;zu&#34;}]}} . Benefits of an API . The benefits of using an API is that it allows us to move and deliver requests of data back and forth which allows for increased connectivity and integration between applications and between your frontend and backend. Additionally, APIs allow for increased productivity as we are now able to stand on the shoulders of giants to apply an API without having to code any additional work. They also allow for access to a lot of data . Benefits of using backend for APIs . It helps lead to a more efficient development as it groups a lot of the steps in development together into one model. Additionally it can lead to a more control over your usage rates and just over the API in general. .",
            "url": "https://lychee80.github.io/Test/2022/12/01/api.html",
            "relUrl": "/2022/12/01/api.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2",
            "content": "OOP stands for Object orientated programming --&gt; comparmentalize | classes are templates to make objects which are instances of a class | Methods aka functions are things the object can do | Attributes are things the object can have | Initialize an object means to call a constructor | Methods have: access modifier, return type ( ex void), name, parameter, exception , body | Methods allow for reusage--&gt; efficiency | To call a method do object. method(parameter) or method(parameter) | . Unit 2 Hw . public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . import java.lang.Math; public class Duel { public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;jeffrey&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.80); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Gunther the great&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(.8); fight(goblin1, goblin2); } } Duel.main(null); . jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 2 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 11 jeffrey attacks Gunther the great! jeffrey hits! Gunther the great takes 2 damage Gunther the great HP: 0 Gunther the great attacks jeffrey! Gunther the great hits! jeffrey takes 1 damage jeffrey HP: 10 Gunther the great has perished . My Human code based on Goblin example . public class Human { private String name; private int HP; private int DMG; private double luck; private String food; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public String getFood() { return food; } public double getLuck() { return luck; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setFood(String newFood) { this.food = newFood; } public void setLuck(double newLuck) { this.luck = newLuck; } } . import java.lang.Math; public class Eating { public static void eat(Human Human1) { System.out.println(Human1.getName() + &quot; has an HP of &quot; +Human1.getHP() ); System.out.println(Human1.getName()+ &quot; is eating &quot; + Human1.getFood()); for(int x=0; x&lt;5; x ++ ) { if (Math.random() &lt; Human1.getLuck()) { Human1.takeDMG(Human1.getDMG()); System.out.println(Human1.getName() + &quot; chokes!&quot;); System.out.println(Human1.getName() + &quot; takes &quot; + Human1.getDMG() + &quot; damage&quot;); } else { System.out.println(Human1.getName()+&quot; takes no damage&quot;); System.out.println(Human1.getName()+&quot; takes another bite&quot;); } System.out.println(Human1.getName() + &quot; HP: &quot; + Human1.getHP()); System.out.println(); if (!Human1.isAlive()) { System.out.println(Human1.getName() + &quot; has died&quot;); } } if (Human1.isAlive()) { System.out.println(Human1.getName() + &quot; survives!&quot;); } } public static void main(String[] args) { Human Human1 = new Human(); Human1.setName(&quot;Sarah&quot;); Human1.setHP(10); Human1.setDMG(1); Human1.setFood(&quot;apple&quot;); Human1.setLuck(0.8); eat(Human1); } } Eating.main(null); . Sarah has an HP of 10 Sarah is eating apple Sarah chokes! Sarah takes 1 damage Sarah HP: 9 Sarah chokes! Sarah takes 1 damage Sarah HP: 8 Sarah chokes! Sarah takes 1 damage Sarah HP: 7 Sarah takes no damage Sarah takes another bite Sarah HP: 7 Sarah chokes! Sarah takes 1 damage Sarah HP: 6 Sarah survives! .",
            "url": "https://lychee80.github.io/Test/2022/12/01/Unit2.html",
            "relUrl": "/2022/12/01/Unit2.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 5 HW",
            "content": "2021 FRQ Parts 1a &amp; 3a . public class WordMatch { private String secret; public WordMatch(String word) { } public int scoreGuess(String guess){ int result = 0; for (int i = 0; i &lt; secret.length(); i++){ if(secret.substring(i).indexOf(guess) == 0){ result++; } } return result * guess.length() * guess.length(); } . public void addMembers(String[] names, int gradYear ){ for( String n : names ){ memberList.add(new MemberInfo( n, gradYear, true) ); } } .",
            "url": "https://lychee80.github.io/Test/2022/10/26/hw2.html",
            "relUrl": "/2022/10/26/hw2.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 3 HW",
            "content": "Notes . Unit 3 makes up ~ 15% of the ap exam | if statements will run if the conditional statement is true | if- else will have a statement that will run if the conditional statement is true | if-else-if will extend the else statement to run if the previous conditional statement is false and the new one is true | They can be quite helpful for user input | Switch statement are a bit more efficient | Boolean expressions can either be true or false | == is for comparing unlike = which is assignment | != is for inequality | || is the or operator and &amp;&amp; is the and operator | Logic gates: buffer- output=input, Not- output is the opposite, And- true is inputs were both true, NAND the opposite of and, or - true if at least one is true, NOR - the opposite, XOR- true if the inputs are different, XNOR the opposite | De morgans law is essentially distributive property but with ! operator | U is the union system (or ), ∩ is And (intersection of sets symbol), &#39; is not | Truth tables show all possible values | . 2009 FRQ 3b . public int getChargeStartTime(int chargeTime){ int startTime = 0; for (int i = 1; i &lt; 24; i++){ if (this.getChargingCost(i, chargeTime)&lt; this.getChargingCost(startTime, chargeTime)){ startTime = i; } } return startTime; } . 2017 FRQ 1b . public boolean isStrictlyIncreasing(){ for (int i = 0; i &lt; digitList.size()-1; i++) { if (digitList.get(i).intValue() &gt;= digitList.get(i+1).intValue()){ return false; } } return true; } . 2019 FRQ 3b . public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { int openDels = 0; int closeDels = 0; for (String del : delimiters) { if (del.equals(openDel)) { openDels++; } else { closeDels++; } if (closeDels &gt; openDels) { return false; } } return openDels == closeDels; } .",
            "url": "https://lychee80.github.io/Test/2022/10/26/hw.html",
            "relUrl": "/2022/10/26/hw.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 4",
            "content": "Iteration --&gt; simplification with loops | Increment is ++, Decrement is -- | Types of loops: while, for, recursion, nester iteration | While: while the condition is true do this | Do/ while: do this first and then if the condition is true continue | For loop: for as long as the condition is true do this | Recursion loop: calls itself to repeat | nested iteration: Loop in a loop | . Pop quiz . class main { public static void main(String[] args) { int i=0; while(i&lt;5){ System.out.println(i); i++; } } } main.main(null); . 0 1 2 3 4 . class main { public static void main(String[] args) { for(int i=0 ;i&lt;5; i++){ System.out.println(i); } } } main.main(null); . 0 1 2 3 4 . Iteration HW Unit 4 . import java.util.Scanner; class Console { public static void main(String[] args) { Scanner game = new Scanner(System.in); boolean start = true; int num = (int)(Math.random() * 101); while (start) { System.out.println(&quot;Guessing Game! The range is an answer between 1-100 &quot;); int input= game.nextInt(); if (input &gt; num) { System.out.println(input+ &quot; is too high! Try again&quot; ); } else if (input &lt; num) { System.out.println( input+ &quot; is too low! Try again&quot; ); } else if (input == num) { System.out.println(&quot;You got it! The answer is &quot; + num); start = false; } } } } Console.main(null); . Guessing Game! The range is an answer between 1-100 50 is too low! Try again Guessing Game! The range is an answer between 1-100 70 is too low! Try again Guessing Game! The range is an answer between 1-100 80 is too low! Try again Guessing Game! The range is an answer between 1-100 90 is too high! Try again Guessing Game! The range is an answer between 1-100 85 is too high! Try again Guessing Game! The range is an answer between 1-100 83 is too high! Try again Guessing Game! The range is an answer between 1-100 82 is too high! Try again Guessing Game! The range is an answer between 1-100 You got it! The answer is 81 .",
            "url": "https://lychee80.github.io/Test/2022/10/24/hw.html",
            "relUrl": "/2022/10/24/hw.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
  
    
        ,"post21": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lychee80.github.io/Test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post22": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lychee80.github.io/Test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Collegeboard",
          "content": "Units . Primitive types Primitives . | Using Objects | Boolean Expressions and if Statements | ITeration | Writing Classes | Array | ArrayList | 2D Array | Inheritance | Recursion |",
          "url": "https://lychee80.github.io/Test/APCSACB/",
          "relUrl": "/APCSACB/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "PBL",
          "content": "Week 0 . HelloWorld(Java) | HelloWorld(Python) | Post1 | Week 1 . Bash | Primitives |",
          "url": "https://lychee80.github.io/Test/APCSAPBL/",
          "relUrl": "/APCSAPBL/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lychee80.github.io/Test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Final",
          "content": "Final Collegeboard (38/40) . I’m not that happy with my score cause even though it is pretty good I ended up having to search up a lot of problems and I know that there are several topics that I still need to work on. . Question 7 . I didn’t read the question carefully and didn’t notice that the new Person object was called student and so we should be referring to student when setting the name . Question 40 . I was kinda confused about what the question was asking for but it makes a lot more sense after reading the answer . Test Reflection . I think I need to study Java a lot more since I needed to search up a lot of things when taking this test. I was confused about a lot of questions which kinda shows that I still have room to grow and learn. Some of the parts that I really needed to work on is arrays since this is a big part of the test and it made up a majority of the questions. I was confused a lot on the looping through an array part and had to get help. Another thing that I got really confused about was the substrings and this I had to get help. I’m still a bit lost about substrings so this is one of the things I need to work on. . Trimester Reflection . I think this trimester I had a lot of problems with time management and this kind of impacted my work in this class and just in school in general and so moving forward this is something I really want to work on. I also felt that it was kind of rough for me too since I went into this class not really knowing much and having not taking CSP beforehand and with little experience and I think that I kind of overestimated myself and so next trimester I think I really need work harder in order to make up for some parts of knowledge that I just lacked. However, overall this trimester was a really fun experience and I learned a lot through just being uncomfortable and going through things that I just didn’t know. .",
          "url": "https://lychee80.github.io/Test/final/",
          "relUrl": "/final/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lychee80.github.io/Test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}